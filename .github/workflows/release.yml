name: Build and Release

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch - stable release
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
          # Develop branch - dev release
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=${VERSION#v}
          COMMIT=$(git rev-parse --short HEAD)
          VERSION="${VERSION}-dev-${COMMIT}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
          # Tag push - stable release
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
        else
          # PR or other - dev build
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Build for multiple platforms
      run: |
        mkdir -p dist
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        for platform in "${platforms[@]}"; do
          os=$(echo $platform | cut -d'/' -f1)
          arch=$(echo $platform | cut -d'/' -f2)
          
          echo "Building for $os/$arch..."
          
          if [ "$os" = "windows" ]; then
            ext=".exe"
          else
            ext=""
          fi
          
          GOOS=$os GOARCH=$arch go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/portico-$os-$arch$ext" \
            ./cmd/portico
        done
    
    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: portico-binaries-${{ steps.version.outputs.tag }}
        path: dist/
    
    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Portico ${{ steps.version.outputs.tag }}
        prerelease: ${{ steps.version.outputs.prerelease }}
        files: |
          dist/*
        body: |
          ## Portico ${{ steps.version.outputs.tag }}
          
          ### Installation
          
          **Linux/macOS:**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/maxvegac/portico/main/install.sh | bash
          ```
          
          ### What's New
          - 🚀 Portico PaaS platform
          - 🐳 Docker-based architecture
          - 🔐 Secrets management
          - 📦 Easy application deployment
          
          ### Files
          - `portico-linux-amd64` - Linux x86_64
          - `portico-linux-arm64` - Linux ARM64
          - `portico-darwin-amd64` - macOS x86_64
          - `portico-darwin-arm64` - macOS ARM64 (Apple Silicon)
          - `checksums.txt` - SHA256 checksums
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
